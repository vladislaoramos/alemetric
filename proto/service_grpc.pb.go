// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/service.proto

package grpcTool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsToolClient is the client API for MetricsTool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsToolClient interface {
	GetMetricsNames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricsNames, error)
	StoreMetrics(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetMetrics(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*MetricsResponse, error)
}

type metricsToolClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsToolClient(cc grpc.ClientConnInterface) MetricsToolClient {
	return &metricsToolClient{cc}
}

func (c *metricsToolClient) GetMetricsNames(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*MetricsNames, error) {
	out := new(MetricsNames)
	err := c.cc.Invoke(ctx, "/server.MetricsTool/GetMetricsNames", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsToolClient) StoreMetrics(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/server.MetricsTool/StoreMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *metricsToolClient) GetMetrics(ctx context.Context, in *Metrics, opts ...grpc.CallOption) (*MetricsResponse, error) {
	out := new(MetricsResponse)
	err := c.cc.Invoke(ctx, "/server.MetricsTool/GetMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MetricsToolServer is the server API for MetricsTool service.
// All implementations must embed UnimplementedMetricsToolServer
// for forward compatibility
type MetricsToolServer interface {
	GetMetricsNames(context.Context, *emptypb.Empty) (*MetricsNames, error)
	StoreMetrics(context.Context, *Metrics) (*emptypb.Empty, error)
	GetMetrics(context.Context, *Metrics) (*MetricsResponse, error)
	mustEmbedUnimplementedMetricsToolServer()
}

// UnimplementedMetricsToolServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsToolServer struct {
}

func (UnimplementedMetricsToolServer) GetMetricsNames(context.Context, *emptypb.Empty) (*MetricsNames, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetricsNames not implemented")
}
func (UnimplementedMetricsToolServer) StoreMetrics(context.Context, *Metrics) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StoreMetrics not implemented")
}
func (UnimplementedMetricsToolServer) GetMetrics(context.Context, *Metrics) (*MetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMetrics not implemented")
}
func (UnimplementedMetricsToolServer) mustEmbedUnimplementedMetricsToolServer() {}

// UnsafeMetricsToolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsToolServer will
// result in compilation errors.
type UnsafeMetricsToolServer interface {
	mustEmbedUnimplementedMetricsToolServer()
}

func RegisterMetricsToolServer(s grpc.ServiceRegistrar, srv MetricsToolServer) {
	s.RegisterService(&MetricsTool_ServiceDesc, srv)
}

func _MetricsTool_GetMetricsNames_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsToolServer).GetMetricsNames(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.MetricsTool/GetMetricsNames",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsToolServer).GetMetricsNames(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsTool_StoreMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsToolServer).StoreMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.MetricsTool/StoreMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsToolServer).StoreMetrics(ctx, req.(*Metrics))
	}
	return interceptor(ctx, in, info, handler)
}

func _MetricsTool_GetMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Metrics)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MetricsToolServer).GetMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/server.MetricsTool/GetMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MetricsToolServer).GetMetrics(ctx, req.(*Metrics))
	}
	return interceptor(ctx, in, info, handler)
}

// MetricsTool_ServiceDesc is the grpc.ServiceDesc for MetricsTool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MetricsTool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "server.MetricsTool",
	HandlerType: (*MetricsToolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMetricsNames",
			Handler:    _MetricsTool_GetMetricsNames_Handler,
		},
		{
			MethodName: "StoreMetrics",
			Handler:    _MetricsTool_StoreMetrics_Handler,
		},
		{
			MethodName: "GetMetrics",
			Handler:    _MetricsTool_GetMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/service.proto",
}
