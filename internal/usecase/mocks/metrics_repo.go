// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/vladislaoramos/alemetric/internal/entity"
)

// MetricsRepo is an autogenerated mock type for the MetricsRepo type
type MetricsRepo struct {
	mock.Mock
}

type MetricsRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MetricsRepo) EXPECT() *MetricsRepo_Expecter {
	return &MetricsRepo_Expecter{mock: &_m.Mock}
}

// GetMetrics provides a mock function with given fields: _a0, _a1
func (_m *MetricsRepo) GetMetrics(_a0 context.Context, _a1 string) (entity.Metrics, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.Metrics
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Metrics); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.Metrics)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetricsRepo_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MetricsRepo_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 string
func (_e *MetricsRepo_Expecter) GetMetrics(_a0 interface{}, _a1 interface{}) *MetricsRepo_GetMetrics_Call {
	return &MetricsRepo_GetMetrics_Call{Call: _e.mock.On("GetMetrics", _a0, _a1)}
}

func (_c *MetricsRepo_GetMetrics_Call) Run(run func(_a0 context.Context, _a1 string)) *MetricsRepo_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MetricsRepo_GetMetrics_Call) Return(_a0 entity.Metrics, _a1 error) *MetricsRepo_GetMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetMetricsNames provides a mock function with given fields: ctx
func (_m *MetricsRepo) GetMetricsNames(ctx context.Context) []string {
	ret := _m.Called(ctx)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// MetricsRepo_GetMetricsNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricsNames'
type MetricsRepo_GetMetricsNames_Call struct {
	*mock.Call
}

// GetMetricsNames is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MetricsRepo_Expecter) GetMetricsNames(ctx interface{}) *MetricsRepo_GetMetricsNames_Call {
	return &MetricsRepo_GetMetricsNames_Call{Call: _e.mock.On("GetMetricsNames", ctx)}
}

func (_c *MetricsRepo_GetMetricsNames_Call) Run(run func(ctx context.Context)) *MetricsRepo_GetMetricsNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetricsRepo_GetMetricsNames_Call) Return(_a0 []string) *MetricsRepo_GetMetricsNames_Call {
	_c.Call.Return(_a0)
	return _c
}

// Ping provides a mock function with given fields: _a0
func (_m *MetricsRepo) Ping(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricsRepo_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MetricsRepo_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MetricsRepo_Expecter) Ping(_a0 interface{}) *MetricsRepo_Ping_Call {
	return &MetricsRepo_Ping_Call{Call: _e.mock.On("Ping", _a0)}
}

func (_c *MetricsRepo_Ping_Call) Run(run func(_a0 context.Context)) *MetricsRepo_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetricsRepo_Ping_Call) Return(_a0 error) *MetricsRepo_Ping_Call {
	_c.Call.Return(_a0)
	return _c
}

// StoreAll provides a mock function with given fields:
func (_m *MetricsRepo) StoreAll() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricsRepo_StoreAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreAll'
type MetricsRepo_StoreAll_Call struct {
	*mock.Call
}

// StoreAll is a helper method to define mock.On call
func (_e *MetricsRepo_Expecter) StoreAll() *MetricsRepo_StoreAll_Call {
	return &MetricsRepo_StoreAll_Call{Call: _e.mock.On("StoreAll")}
}

func (_c *MetricsRepo_StoreAll_Call) Run(run func()) *MetricsRepo_StoreAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MetricsRepo_StoreAll_Call) Return(_a0 error) *MetricsRepo_StoreAll_Call {
	_c.Call.Return(_a0)
	return _c
}

// StoreMetrics provides a mock function with given fields: _a0, _a1
func (_m *MetricsRepo) StoreMetrics(_a0 context.Context, _a1 entity.Metrics) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Metrics) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricsRepo_StoreMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreMetrics'
type MetricsRepo_StoreMetrics_Call struct {
	*mock.Call
}

// StoreMetrics is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entity.Metrics
func (_e *MetricsRepo_Expecter) StoreMetrics(_a0 interface{}, _a1 interface{}) *MetricsRepo_StoreMetrics_Call {
	return &MetricsRepo_StoreMetrics_Call{Call: _e.mock.On("StoreMetrics", _a0, _a1)}
}

func (_c *MetricsRepo_StoreMetrics_Call) Run(run func(_a0 context.Context, _a1 entity.Metrics)) *MetricsRepo_StoreMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Metrics))
	})
	return _c
}

func (_c *MetricsRepo_StoreMetrics_Call) Return(_a0 error) *MetricsRepo_StoreMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

// Upload provides a mock function with given fields: _a0
func (_m *MetricsRepo) Upload(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricsRepo_Upload_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Upload'
type MetricsRepo_Upload_Call struct {
	*mock.Call
}

// Upload is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MetricsRepo_Expecter) Upload(_a0 interface{}) *MetricsRepo_Upload_Call {
	return &MetricsRepo_Upload_Call{Call: _e.mock.On("Upload", _a0)}
}

func (_c *MetricsRepo_Upload_Call) Run(run func(_a0 context.Context)) *MetricsRepo_Upload_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetricsRepo_Upload_Call) Return(_a0 error) *MetricsRepo_Upload_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMetricsRepo interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetricsRepo creates a new instance of MetricsRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetricsRepo(t mockConstructorTestingTNewMetricsRepo) *MetricsRepo {
	mock := &MetricsRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
