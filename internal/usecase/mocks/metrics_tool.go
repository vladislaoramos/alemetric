// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	entity "github.com/vladislaoramos/alemetric/internal/entity"
)

// MetricsTool is an autogenerated mock type for the MetricsTool type
type MetricsTool struct {
	mock.Mock
}

type MetricsTool_Expecter struct {
	mock *mock.Mock
}

func (_m *MetricsTool) EXPECT() *MetricsTool_Expecter {
	return &MetricsTool_Expecter{mock: &_m.Mock}
}

// GetMetrics provides a mock function with given fields: _a0, _a1
func (_m *MetricsTool) GetMetrics(_a0 context.Context, _a1 entity.Metrics) (entity.Metrics, error) {
	ret := _m.Called(_a0, _a1)

	var r0 entity.Metrics
	if rf, ok := ret.Get(0).(func(context.Context, entity.Metrics) entity.Metrics); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(entity.Metrics)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, entity.Metrics) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetricsTool_GetMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetrics'
type MetricsTool_GetMetrics_Call struct {
	*mock.Call
}

// GetMetrics is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entity.Metrics
func (_e *MetricsTool_Expecter) GetMetrics(_a0 interface{}, _a1 interface{}) *MetricsTool_GetMetrics_Call {
	return &MetricsTool_GetMetrics_Call{Call: _e.mock.On("GetMetrics", _a0, _a1)}
}

func (_c *MetricsTool_GetMetrics_Call) Run(run func(_a0 context.Context, _a1 entity.Metrics)) *MetricsTool_GetMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Metrics))
	})
	return _c
}

func (_c *MetricsTool_GetMetrics_Call) Return(_a0 entity.Metrics, _a1 error) *MetricsTool_GetMetrics_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetMetricsNames provides a mock function with given fields: _a0
func (_m *MetricsTool) GetMetricsNames(_a0 context.Context) ([]string, error) {
	ret := _m.Called(_a0)

	var r0 []string
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MetricsTool_GetMetricsNames_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMetricsNames'
type MetricsTool_GetMetricsNames_Call struct {
	*mock.Call
}

// GetMetricsNames is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MetricsTool_Expecter) GetMetricsNames(_a0 interface{}) *MetricsTool_GetMetricsNames_Call {
	return &MetricsTool_GetMetricsNames_Call{Call: _e.mock.On("GetMetricsNames", _a0)}
}

func (_c *MetricsTool_GetMetricsNames_Call) Run(run func(_a0 context.Context)) *MetricsTool_GetMetricsNames_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetricsTool_GetMetricsNames_Call) Return(_a0 []string, _a1 error) *MetricsTool_GetMetricsNames_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// PingRepo provides a mock function with given fields: _a0
func (_m *MetricsTool) PingRepo(_a0 context.Context) error {
	ret := _m.Called(_a0)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricsTool_PingRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PingRepo'
type MetricsTool_PingRepo_Call struct {
	*mock.Call
}

// PingRepo is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MetricsTool_Expecter) PingRepo(_a0 interface{}) *MetricsTool_PingRepo_Call {
	return &MetricsTool_PingRepo_Call{Call: _e.mock.On("PingRepo", _a0)}
}

func (_c *MetricsTool_PingRepo_Call) Run(run func(_a0 context.Context)) *MetricsTool_PingRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MetricsTool_PingRepo_Call) Return(_a0 error) *MetricsTool_PingRepo_Call {
	_c.Call.Return(_a0)
	return _c
}

// StoreMetrics provides a mock function with given fields: _a0, _a1
func (_m *MetricsTool) StoreMetrics(_a0 context.Context, _a1 entity.Metrics) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.Metrics) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MetricsTool_StoreMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreMetrics'
type MetricsTool_StoreMetrics_Call struct {
	*mock.Call
}

// StoreMetrics is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 entity.Metrics
func (_e *MetricsTool_Expecter) StoreMetrics(_a0 interface{}, _a1 interface{}) *MetricsTool_StoreMetrics_Call {
	return &MetricsTool_StoreMetrics_Call{Call: _e.mock.On("StoreMetrics", _a0, _a1)}
}

func (_c *MetricsTool_StoreMetrics_Call) Run(run func(_a0 context.Context, _a1 entity.Metrics)) *MetricsTool_StoreMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.Metrics))
	})
	return _c
}

func (_c *MetricsTool_StoreMetrics_Call) Return(_a0 error) *MetricsTool_StoreMetrics_Call {
	_c.Call.Return(_a0)
	return _c
}

type mockConstructorTestingTNewMetricsTool interface {
	mock.TestingT
	Cleanup(func())
}

// NewMetricsTool creates a new instance of MetricsTool. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMetricsTool(t mockConstructorTestingTNewMetricsTool) *MetricsTool {
	mock := &MetricsTool{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
